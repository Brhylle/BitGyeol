#include <Servo.h>
#include <Wire.h>           // Use hardware I2C
#include <LiquidCrystal_I2C.h>
#include <RTClib.h>

// Servo objects
Servo myDoorServo;
Servo myGarageServoOne;

// Default I2C communication (Wire)
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Adjust the LCD address (0x27 or 0x3F)
RTC_DS3231 rtc;  // Use default I2C for RTC

// Pin assignments
int LDR_PIN = A2;

int exteriorLights1 = 2;
int exteriorLights2 = 4;
int exteriorLights3 = 7;
int exteriorLights4 = 8;

int interiorLights1 = 3; // for living room
int garageLights1 = 6;   // for garage room

int doorServoPin = A0;   // Pin for door servo
int oneGaragePin = A1;   // Pin for garage servo

unsigned long previousMillis = 0; // Tracks the last time scene was updated
const unsigned long interval = 10000; // 10 seconds interval
int currentScene = 0; // Tracks the current scene

// Variables for scrolling text
String scrollingText = "";
int scrollIndex = 0;
unsigned long scrollMillis = 0;
const unsigned long scrollInterval = 300; // Scroll every 300ms

bool garageLightsState = false;  // Initial state of garage lights is OFF
bool externalLightsState = false;
bool internalLightsState = false;
bool doorState = false;
bool garageState = false;
bool isAutomaticMode = true; // Start in automatic mode
bool showStatus = false;              // Flag to indicate status display mode
unsigned long statusStartMillis = 0; // Timestamp for when status display started
String statusMessage = "";           // Message to show during status display


// Declared constants
const uint8_t doorClosedValue = 0;
const uint8_t doorOpenedValue = 180;

const uint8_t garageClosedValue = 90;
const uint8_t garageOpenedValue = 0;

int lightValue;
int dv = 250;

void setup() {
  Serial.begin(9600);   // Initialize serial communication

  // Initialize RTC with default I2C
  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC");
    while (1); // Halt if RTC is not found
  }
  
  // Check if RTC lost power and set the time if necessary
  if (rtc.lostPower()) {
    Serial.println("RTC lost power, setting the time!");
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));  // Set RTC to compile time
  }

  // Initialize LCD with default I2C
  lcd.begin(16, 2);  // Initialize 16x2 LCD
  lcd.backlight();
  lcd.clear();       // Clear LCD display initially

  // Lighting pin initialization
  pinMode(LDR_PIN, INPUT);
  pinMode(exteriorLights1, OUTPUT);
  pinMode(exteriorLights2, OUTPUT);
  pinMode(exteriorLights3, OUTPUT);
  pinMode(exteriorLights4, OUTPUT);
  pinMode(interiorLights1, OUTPUT);
  pinMode(garageLights1, OUTPUT);

  // Actuator pin initialization
  myDoorServo.attach(doorServoPin);
  myGarageServoOne.attach(oneGaragePin);

  Serial.println("Lights and servos initialized.");

  // Initialize servos and lights
  myDoorServo.write(doorClosedValue);
  myGarageServoOne.write(garageClosedValue);
  toggleExternalLights(false);
}

void loop() {
  watchForPhotons();
  watchForCommands();

  // Print current time to Serial Monitor
  DateTime now = rtc.now();
  Serial.print("Time: ");
  Serial.print(now.hour());
  Serial.print(":");
  if (now.minute() < 10) {
    Serial.print("0");  // Add leading zero for minutes
  }
  Serial.print(now.minute());
  Serial.print(":");
  if (now.second() < 10) {
    Serial.print("0");  // Add leading zero for seconds
  }
  Serial.print(now.second());
  Serial.print(" Date: ");
  Serial.print(now.day(), DEC);
  Serial.print("/");
  Serial.print(now.month(), DEC);
  Serial.print("/");
  Serial.println(now.year(), DEC);

  updateLCD();
}

// Read LDR and control lights/actuators based on light level
void watchForPhotons() {
  if (!isAutomaticMode) return; // Skip logic if not in automatic mode

  lightValue = analogRead(LDR_PIN);
  Serial.println(lightValue);
  delay(dv);

  if (lightValue >= 0 && lightValue <= 149) {  // Night
    toggleExternalLights(true);
    toggleInternalLights(true);
    toggleGarageLights(true);
    toggleDoor(false);
    toggleGarage(false);
  } else if (lightValue >= 150 && lightValue <= 1000) {  // Day
    toggleExternalLights(false);
    toggleDoor(true);
    toggleGarage(true);
    toggleInternalLights(false);
    toggleGarageLights(false);
  }
}

// Check for serial commands to control components
void watchForCommands() {
  if (Serial.available() > 0) {
    char command = Serial.read();

  if (command == 'm') {
    isAutomaticMode = !isAutomaticMode; // Toggle between manual and automatic
    statusMessage = isAutomaticMode ? "Mode: Automatic" : "Mode: Manual";
    showStatus = true;               // Enter status display mode
    statusStartMillis = millis();    // Record the start time for the status display
    Serial.println(statusMessage);   // Log to Serial Monitor
  }

    if (isAutomaticMode) return; // Ignore other commands if in automatic mode

    if (command == 'q') toggleDoor(!doorState);
    if (command == 'w') toggleGarage(!garageState);
    if (command == 'e') toggleExternalLights(!externalLightsState);
    if (command == 'r') toggleInternalLights(!internalLightsState);
    if (command == 't') toggleGarageLights(!garageLightsState);
  }
}

// Update the LCD display with the current time and date
void updateLCD() {
  unsigned long currentMillis = millis();

  // If in status display mode, show the status message
  if (showStatus) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(statusMessage);

    // Check if 3 seconds have passed since status display started
    if (currentMillis - statusStartMillis >= 3000) {
      showStatus = false;  // Exit status display mode
      previousMillis = currentMillis; // Reset scene cycle timer
    }
    return; // Skip normal scene cycle
  }

  // Handle scene switching every 10 seconds
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    currentScene = (currentScene + 1) % 4; // Cycle through scenes
    scrollIndex = 0; // Reset scrolling index for new scene
  }

  // Handle text scrolling every 300ms
  if (currentMillis - scrollMillis >= scrollInterval) {
    scrollMillis = currentMillis;

    lcd.clear(); // Clear LCD display before updating

    if (currentScene == 0) {
      scrollingText = "Group 4 Presents:";
      lcd.setCursor(0, 0);
      lcd.print(scrollingText.substring(scrollIndex, scrollIndex + 16));
      lcd.setCursor(0, 1);
      lcd.print("BitGyeol");
    } else if (currentScene == 1) {
      DateTime now = rtc.now();
      lcd.setCursor(0, 0);
      lcd.print("Time: ");
      if (now.hour() < 10) lcd.print("0");
      lcd.print(now.hour());
      lcd.print(":");
      if (now.minute() < 10) lcd.print("0");
      lcd.print(now.minute());
      lcd.print(":");
      if (now.second() < 10) lcd.print("0");
      lcd.print(now.second());

      lcd.setCursor(0, 1);
      lcd.print("Date: ");
      lcd.print(now.day());
      lcd.print("/");
      lcd.print(now.month());
      lcd.print("/");
      lcd.print(now.year());
    } else if (currentScene == 2) {
      scrollingText = "Welcome to BitGyeol -- Where Your Home Is";
      String members = "Members: Dela Cruz; Fortin; Magnaye; Tuazon";
      lcd.setCursor(0, 0);
      lcd.print(scrollingText.substring(scrollIndex, scrollIndex + 16));
      lcd.setCursor(0, 1);
      lcd.print(members.substring(scrollIndex, scrollIndex + 16));
    } else if (currentScene == 3) {
      DateTime now = rtc.now();
      String greeting;

      if (now.hour() >= 5 && now.hour() < 12) {
        greeting = "Good Morning!";
      } else if (now.hour() >= 12 && now.hour() < 18) {
        greeting = "Good Afternoon!";
      } else {
        greeting = "Good Evening!";
      }

      scrollingText = "Have a great experience!";
      lcd.setCursor(0, 0);
      lcd.print(greeting); // Display the greeting
      lcd.setCursor(0, 1);
      lcd.print(scrollingText.substring(scrollIndex, scrollIndex + 16));
    }

    // Update scroll index for the next frame
    scrollIndex++;
    if (scrollIndex + 16 > scrollingText.length()) {
      scrollIndex = 0; // Reset scrolling index when text ends
    }
  }
}

// Functions to control components
void toggleGarageLights(bool isActive) {
  garageLightsState = isActive;
  digitalWrite(garageLights1, isActive ? HIGH : LOW);
}

void toggleInternalLights(bool isActive) {
  internalLightsState = isActive;
  digitalWrite(interiorLights1, isActive ? HIGH : LOW);
}

void toggleDoor(bool isActive) {
  doorState = isActive;
  myDoorServo.write(isActive ? doorOpenedValue : doorClosedValue);
  Serial.println(isActive ? "Door opened" : "Door closed");
}

void toggleGarage(bool isActive) {
  garageState = isActive;
  myGarageServoOne.write(isActive ? garageOpenedValue : garageClosedValue);
  Serial.println(isActive ? "Garage opened" : "Garage closed");
}

void toggleExternalLights(bool isActive) {
  externalLightsState = isActive;
  digitalWrite(exteriorLights1, isActive ? HIGH : LOW);
  digitalWrite(exteriorLights2, isActive ? HIGH : LOW);
  digitalWrite(exteriorLights3, isActive ? HIGH : LOW);
  digitalWrite(exteriorLights4, isActive ? HIGH : LOW);
}
